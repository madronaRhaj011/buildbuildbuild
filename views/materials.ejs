<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" type="image/x-icon" href="..//tool.png">
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /* Smooth transitions */
    .dropdown-transition {
      transition: transform 0.2s ease-in-out;
    }
    .opacity-transition {
      transition: opacity 0.2s ease-in-out;
    }
  </style>
  <title>Materials</title>
</head>
<body class="pt-28 overscroll-none">
  <%- include('partials/nav') %>

  <div class="">

    <div class="flex flex-wrap justify-center items-center space-x-4">
      <!-- Search Input -->
      <div class="flex flex-col sm:flex-row sm:items-center sm:space-x-2 space-y-2 sm:space-y-0">
        <input
          type="text"
          placeholder="Search product name"
          id="searchinput"
          class="px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
      </div>

      <!-- Categories Dropdown -->
      <div>
        <select
          class="px-4 py-2 text-black bg-slate-100 rounded-md focus:ring-2 focus:ring-blue-500"
          id="categorySelect"
        >
          <option value="all" selected>Select All</option>
          <% category.forEach(ct => { %>
            <option value="<%= ct.category.toLowerCase() %>"><%= ct.category %></option>
          <% }) %>
        </select>
      </div>

      <!-- Price Filtering -->
      <div class="flex items-center space-x-2">
        <input
          type="number"
          id="minPrice"
          placeholder="Min Price"
          class="px-2 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-28"
        />
        <span class="text-gray-500">-</span>
        <input
          type="number"
          id="maxPrice"
          placeholder="Max Price"
          class="px-2 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-28"
        />
        <button
          type="button"
          id="applyPriceFilter"
          class="px-4 py-2 bg-blue-500 text-white rounded-md shadow-sm hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          Apply
        </button>
      </div>
    </div>

    <div class="mx-auto max-w-2xl px-4 py-16 sm:px-6 sm:py-24 lg:max-w-7xl lg:px-8">
      <h2 class="text-2xl font-bold tracking-tight text-gray-900">Material List</h2>

      <div class="mt-6 grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-4 xl:gap-x-8">
        <% product.forEach(pr => { %>
        <div class="group relative" id="prcontainer" data-category="<%= pr.category.toLowerCase() %>" data-price="<%= pr.price %>">
          <div class="aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-md bg-gray-200 lg:aspect-none group-hover:opacity-75 lg:h-80">
            <img src="<%= pr.image_url %>" alt="<%= pr.name %>" class="h-full w-full object-cover object-center lg:h-full lg:w-full">
          </div>
          <div class="mt-4 flex justify-between">
            <div>
              <h3 class="text-sm text-gray-700">
                <a href="/material-overview/<%= pr.product_id %>" id="name">
                  <span aria-hidden="true" class="absolute inset-0"></span>
                  <%= pr.name %>
                </a>
              </h3>
              <p class="mt-1 text-sm text-gray-500"><%= pr.description %></p>
            </div>
            <p class="text-sm font-medium text-gray-900">&#8369;<%= pr.price %></p>
          </div>
        </div>
        <% }) %>
      </div>
      <div id="nores" class="text-center text-red-500 mt-4" style="display: none;">No Products Found</div>
    </div>
  </div>

  <footer class="bg-gray-800 text-white py-8">
    <div class="container mx-auto text-center">
      <p>&copy; 2024 BuildPro. All rights reserved.</p>
    </div>
  </footer>

  <script>
    // Debounce function for efficiency
    function debounce(func, delay) {
      let timer;
      return function (...args) {
        clearTimeout(timer);
        timer = setTimeout(() => func.apply(this, args), delay);
      };
    }

    // Initialize products
    const products = Array.from(document.querySelectorAll('#prcontainer')).map(product => ({
      element: product,
      name: product.querySelector('#name').innerText.trim().toLowerCase(),
      category: product.dataset.category.toLowerCase(),
      price: parseFloat(product.dataset.price),
    }));

    const searchInput = document.getElementById('searchinput');
    const categorySelect = document.getElementById('categorySelect');
    const minPriceInput = document.getElementById('minPrice');
    const maxPriceInput = document.getElementById('maxPrice');
    const applyPriceFilterButton = document.getElementById('applyPriceFilter');
    const noResultMessage = document.getElementById('nores');

    // Filter products based on search, category, and price
    function filterProducts() {
      const searchQuery = searchInput.value.trim().toLowerCase();
      const selectedCategory = categorySelect.value;
      const minPrice = parseFloat(minPriceInput.value) || 0;
      const maxPrice = parseFloat(maxPriceInput.value) || Infinity;

      let productFound = false;

      products.forEach(({ element, name, category, price }) => {
        const matchesCategory = selectedCategory === "all" || category === selectedCategory;
        const matchesSearch = name.includes(searchQuery);
        const matchesPrice = price >= minPrice && price <= maxPrice;

        if (matchesCategory && matchesPrice && (searchQuery === "" || matchesSearch)) {
          element.style.display = 'block';
          productFound = true;
        } else {
          element.style.display = 'none';
        }
      });

      noResultMessage.style.display = productFound ? 'none' : 'block';
    }

    // Event listeners
    searchInput.addEventListener('input', debounce(filterProducts, 300));
    categorySelect.addEventListener('change', filterProducts);
    applyPriceFilterButton.addEventListener('click', filterProducts);
  </script>
  <script>
    // Update highlighted item
    function updateHighlight() {
      const items = dropdownList.querySelectorAll('li');
      items.forEach((item, index) => {
        const isHighlighted = index === highlightedIndex;
        item.className = `
          px-4 
          py-2 
          text-sm 
          cursor-pointer 
          transition-colors 
          duration-150,
          ${isHighlighted ? 'bg-blue-100 text-blue-900' : 'text-gray-900 hover:bg-gray-100'}
        `;
        item.setAttribute('aria-selected', isHighlighted);
      });

      // Scroll highlighted item into view if needed
      if (highlightedIndex >= 0) {
        const highlightedItem = items[highlightedIndex];
        if (highlightedItem) {
          const dropdownRect = dropdownList.getBoundingClientRect();
          const itemRect = highlightedItem.getBoundingClientRect();
          
          if (itemRect.bottom > dropdownRect.bottom) {
            highlightedItem.scrollIntoView(false);
          } else if (itemRect.top < dropdownRect.top) {
            highlightedItem.scrollIntoView(true);
          }
        }
      }
    }

    // Select an item
    function selectItem(item) {
      input.value = item;
      toggleDropdown(false);
      input.focus();
    }

    // Event Listeners
    toggleButton.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleDropdown();
    });

    input.addEventListener('focus', () => {
      if (!isOpen) {
        toggleDropdown(true);
      }
    });

    input.addEventListener('input', (e) => {
      if (!isOpen) {
        toggleDropdown(true);
      }
      filterItems(e.target.value);
      highlightedIndex = 0;
      updateHighlight();
    });

    input.addEventListener('keydown', (e) => {
      if (!isOpen && e.key === 'ArrowDown') {
        toggleDropdown(true);
        return;
      }

      if (isOpen) {
        switch (e.key) {
          case 'ArrowDown':
            e.preventDefault();
            highlightedIndex = Math.min(highlightedIndex + 1, filteredItems.length - 1);
            updateHighlight();
            break;
          case 'ArrowUp':
            e.preventDefault();
            highlightedIndex = Math.max(highlightedIndex - 1, 0);
            updateHighlight();
            break;
          case 'Enter':
            e.preventDefault();
            if (highlightedIndex >= 0) {
              selectItem(filteredItems[highlightedIndex]);
            }
            break;
          case 'Escape':
            toggleDropdown(false);
            break;
          case 'Tab':
            toggleDropdown(false);
            break;
        }
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!container.contains(e.target) && isOpen) {
        toggleDropdown(false);
      }
    });

    // Initial setup
    filterItems('');
  </script>
  <script type="module" src="..//script/script.js"></script>
</body>
</html>
